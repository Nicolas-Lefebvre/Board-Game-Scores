"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.METRIC_COMPONENT_LINKS = exports.getComponentStateData = exports.getComponentStateQueryString = exports.COMPONENT_STATE_META = exports.ComponentStateParam = exports.getBundlePackagesByNameComponentLink = exports.BUNDLE_PACKAGES_DUPLICATE_CHANGED = exports.BUNDLE_PACKAGES_DUPLICATE = exports.BUNDLE_PACKAGES_CHANGED = exports.BUNDLE_PACKAGES_COUNT = exports.getBundleModulesBySource = exports.getBundleModulesByFileTpe = exports.getBundleModulesByChunk = exports.getBundleModulesBySearch = exports.BUNDLE_MODULES_DUPLICATE = exports.BUNDLE_MODULES = exports.getBundleAssetsFileTypeComponentLink = exports.getBundleAssetsByEntryType = exports.getBundleAsset = exports.BUNDLE_ASSETS_CHUNK_COUNT = exports.BUNDLE_ASSETS_COUNT = exports.BUNDLE_ASSETS_CACHE_INVALIDATION = exports.BUNDLE_ASSETS_INITIAL_CSS = exports.BUNDLE_ASSETS_INITIAL_JS = exports.TOTALS = exports.getModuleFileTypeFilters = exports.getModuleChunkFilters = exports.getModuleSourceTypeFilters = exports.getAssetEntryTypeFilters = exports.getAssetFileTypeFilters = void 0;
const serialize_query_params_1 = require("serialize-query-params");
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const file_types_1 = require("../config/file-types");
const component_links_1 = require("../config/component-links");
const i18n_1 = __importDefault(require("../i18n"));
const getAssetFileTypeFilters = (value = true) => {
    const filters = {};
    file_types_1.FILE_TYPES.forEach((fileTypeFilter) => {
        filters[`${component_links_1.ASSET_FILE_TYPE}.${fileTypeFilter}`] = value;
    });
    return filters;
};
exports.getAssetFileTypeFilters = getAssetFileTypeFilters;
const getAssetEntryTypeFilters = (value = true) => {
    const filters = {};
    [component_links_1.ASSET_FILTERS.ENTRY, component_links_1.ASSET_FILTERS.INITIAL, component_links_1.ASSET_FILTERS.CHUNK, component_links_1.ASSET_FILTERS.OTHER].forEach((entryTypeFilter) => {
        filters[`${component_links_1.ASSET_ENTRY_TYPE}.${entryTypeFilter}`] = value;
    });
    return filters;
};
exports.getAssetEntryTypeFilters = getAssetEntryTypeFilters;
const getModuleSourceTypeFilters = (value = true) => ({
    [`${component_links_1.MODULE_SOURCE_TYPE}.${component_links_1.MODULE_FILTERS.FIRST_PARTY}`]: value,
    [`${component_links_1.MODULE_SOURCE_TYPE}.${component_links_1.MODULE_FILTERS.THIRD_PARTY}`]: value,
});
exports.getModuleSourceTypeFilters = getModuleSourceTypeFilters;
const getModuleChunkFilters = (chunkIds, value) => {
    const filters = {};
    chunkIds.forEach((chunkId) => {
        filters[`${component_links_1.MODULE_CHUNK}.${chunkId}`] = value;
    });
    return filters;
};
exports.getModuleChunkFilters = getModuleChunkFilters;
const getModuleFileTypeFilters = (value = true) => {
    const filters = {};
    file_types_1.MODULE_SOURCE_FILE_TYPES.forEach((fileType) => {
        filters[`${component_links_1.MODULE_FILE_TYPE}.${fileType}`] = value;
    });
    return filters;
};
exports.getModuleFileTypeFilters = getModuleFileTypeFilters;
exports.TOTALS = {
    section: component_links_1.SECTIONS.TOTALS,
    title: i18n_1.default.COMPONENT_LINK_TOTALS,
};
exports.BUNDLE_ASSETS_INITIAL_JS = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_JS,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...(0, exports.getAssetEntryTypeFilters)(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.INITIAL}`]: true,
                ...(0, exports.getAssetFileTypeFilters)(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${file_types_1.FILE_TYPE_JS}`]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_INITIAL_CSS = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_CSS,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...(0, exports.getAssetEntryTypeFilters)(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.INITIAL}`]: true,
                ...(0, exports.getAssetFileTypeFilters)(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${file_types_1.FILE_TYPE_CSS}`]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_CACHE_INVALIDATION = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_CACHE_INVALIDATION,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [component_links_1.ASSET_FILTERS.CHANGED]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_COUNT = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [component_links_1.ASSET_FILTERS.CHANGED]: false,
            },
        },
    },
};
exports.BUNDLE_ASSETS_CHUNK_COUNT = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_CHUNK_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...(0, exports.getAssetEntryTypeFilters)(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.CHUNK}`]: true,
            },
        },
    },
};
const getBundleAsset = (entryId) => ({
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSET_DETAILS,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            entryId,
            filters: {},
        },
    },
});
exports.getBundleAsset = getBundleAsset;
const getBundleAssetsByEntryType = (assetType) => ({
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_BY_ENTRY_TYPE(assetType),
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [component_links_1.ASSET_FILTERS.CHANGED]: false,
                ...(0, exports.getAssetEntryTypeFilters)(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.ENTRY}`]: assetType === 'entry',
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.INITIAL}`]: assetType === 'initial',
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.CHUNK}`]: assetType === 'chunk',
            },
        },
    },
});
exports.getBundleAssetsByEntryType = getBundleAssetsByEntryType;
const getBundleAssetsFileTypeComponentLink = (fileType, label = fileType) => ({
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_BY_FILE_TYPE({ label }),
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...(0, exports.getAssetFileTypeFilters)(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${fileType}`]: true,
            },
        },
    },
});
exports.getBundleAssetsFileTypeComponentLink = getBundleAssetsFileTypeComponentLink;
exports.BUNDLE_MODULES = {
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
};
exports.BUNDLE_MODULES_DUPLICATE = {
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES_DUPLICATE,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
                [component_links_1.MODULE_FILTERS.DUPLICATED]: true,
            },
        },
    },
};
const getBundleModulesBySearch = (search) => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            search,
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
});
exports.getBundleModulesBySearch = getBundleModulesBySearch;
const getBundleModulesByChunk = (chunkIds, chunkId, fileType = '') => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_CHUNK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
                ...(0, exports.getModuleChunkFilters)(chunkIds, false),
                [`${component_links_1.MODULE_CHUNK}.${chunkId}`]: true,
                ...(fileType && {
                    ...(0, exports.getModuleFileTypeFilters)(false),
                    [`${component_links_1.MODULE_FILE_TYPE}.${fileType}`]: true,
                }),
            },
        },
    },
});
exports.getBundleModulesByChunk = getBundleModulesByChunk;
const getBundleModulesByFileTpe = (fileType, fileTypeLabel) => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES_BY_FILE_TYPE(fileTypeLabel || fileType),
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                ...(0, exports.getModuleFileTypeFilters)(false),
                [`${component_links_1.MODULE_FILE_TYPE}.${fileType}`]: true,
            },
        },
    },
});
exports.getBundleModulesByFileTpe = getBundleModulesByFileTpe;
const getBundleModulesBySource = (thirdParty, label = '') => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES_BY_SOURCE(label),
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [`${component_links_1.MODULE_SOURCE_TYPE}.${component_links_1.MODULE_FILTERS.THIRD_PARTY}`]: thirdParty,
                [`${component_links_1.MODULE_SOURCE_TYPE}.${component_links_1.MODULE_FILTERS.FIRST_PARTY}`]: !thirdParty,
            },
        },
    },
});
exports.getBundleModulesBySource = getBundleModulesBySource;
exports.BUNDLE_PACKAGES_COUNT = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.CHANGED]: false,
            },
        },
    },
};
exports.BUNDLE_PACKAGES_CHANGED = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_CHANGED,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.CHANGED]: true,
            },
        },
    },
};
exports.BUNDLE_PACKAGES_DUPLICATE = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_DUPLICATE,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
};
exports.BUNDLE_PACKAGES_DUPLICATE_CHANGED = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_DUPLICATE_CHANGED,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.CHANGED]: true,
                [component_links_1.PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
};
const getBundlePackagesByNameComponentLink = (search) => ({
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_VIEW_PACKAGE,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            search,
            filters: {
                [component_links_1.PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
});
exports.getBundlePackagesByNameComponentLink = getBundlePackagesByNameComponentLink;
const CUSTOM_ENCODING_URI_CHARS_PATTERN = /(_|-)/g;
const CUSTOM_ENCODING_URI_CODE_PATTERN = /(%(?:2D|5F))/g;
function customEncodeURIComponent(value) {
    return encodeURIComponent(value).replace(CUSTOM_ENCODING_URI_CHARS_PATTERN, (char) => `%${char.charCodeAt(0).toString(16).toUpperCase()}`);
}
function customDecodeURIComponent(value) {
    const encodedURI = value.replace(CUSTOM_ENCODING_URI_CODE_PATTERN, (code) => String.fromCharCode(parseInt(code.replace(/^%/, ''), 16)));
    return decodeURIComponent(encodedURI);
}
exports.ComponentStateParam = {
    encode: (sectionState) => {
        if (!sectionState) {
            return undefined;
        }
        const search = serialize_query_params_1.StringParam.encode(sectionState.search);
        const entryId = serialize_query_params_1.StringParam.encode(sectionState.entryId);
        const filtersEncodedValues = {};
        Object.entries(sectionState.filters || {}).forEach(([key, val]) => {
            filtersEncodedValues[customEncodeURIComponent(key)] = serialize_query_params_1.BooleanParam.encode(!!val);
        });
        const filters = serialize_query_params_1.ObjectParam.encode(filtersEncodedValues);
        const data = {};
        if (search) {
            data.search = search;
        }
        if (entryId) {
            data.entryId = entryId;
        }
        if (!(0, isEmpty_1.default)(filters)) {
            data.filters = filters;
        }
        return serialize_query_params_1.JsonParam.encode(data);
    },
    decode: (queryString) => {
        const params = serialize_query_params_1.JsonParam.decode(queryString);
        if ((0, isEmpty_1.default)(params)) {
            return undefined;
        }
        const search = serialize_query_params_1.StringParam.decode(params.search);
        const entryId = serialize_query_params_1.StringParam.decode(params.entryId);
        let filters = {};
        if (typeof params.filters === 'string') {
            const decodedFilters = serialize_query_params_1.ObjectParam.decode(params.filters);
            Object.entries(decodedFilters || {}).forEach(([key, value]) => {
                const filterDecodedValue = serialize_query_params_1.BooleanParam.decode(value);
                if (typeof filterDecodedValue !== 'undefined' && filterDecodedValue !== null) {
                    filters[customDecodeURIComponent(key)] = filterDecodedValue;
                }
            });
        }
        else if (typeof params.filters === 'object') {
            filters = params.filters;
        }
        const result = {};
        if (search) {
            result.search = search;
        }
        if (entryId) {
            result.entryId = entryId;
        }
        if (!(0, isEmpty_1.default)(filters)) {
            result.filters = filters;
        }
        if ((0, isEmpty_1.default)(result)) {
            return undefined;
        }
        return result;
    },
};
exports.COMPONENT_STATE_META = {
    [component_links_1.COMPONENT.BUNDLE_ASSETS]: exports.ComponentStateParam,
    [component_links_1.COMPONENT.BUNDLE_MODULES]: exports.ComponentStateParam,
    [component_links_1.COMPONENT.BUNDLE_PACKAGES]: exports.ComponentStateParam,
};
const getComponentStateQueryString = (params = {}) => {
    const data = (0, serialize_query_params_1.encodeQueryParams)(exports.COMPONENT_STATE_META, params);
    const searchParams = new URLSearchParams(data);
    return searchParams.toString();
};
exports.getComponentStateQueryString = getComponentStateQueryString;
const getComponentStateData = (queryString) => {
    const params = new URLSearchParams(queryString);
    return (0, serialize_query_params_1.decodeQueryParams)(exports.COMPONENT_STATE_META, Object.fromEntries(params.entries()));
};
exports.getComponentStateData = getComponentStateData;
exports.METRIC_COMPONENT_LINKS = new Map([
    ['webpack.totalSizeByTypeALL', { link: exports.TOTALS }],
    ['webpack.totalInitialSizeJS', { link: exports.BUNDLE_ASSETS_INITIAL_JS }],
    ['webpack.totalInitialSizeCSS', { link: exports.BUNDLE_ASSETS_INITIAL_CSS }],
    ['webpack.cacheInvalidation', { link: exports.BUNDLE_ASSETS_CACHE_INVALIDATION }],
    ['webpack.assetCount', { link: exports.BUNDLE_ASSETS_COUNT }],
    ['webpack.chunkCount', { link: exports.BUNDLE_ASSETS_CHUNK_COUNT }],
    ['webpack.moduleCount', { link: exports.BUNDLE_MODULES }],
    ['webpack.duplicateModulesCount', { link: exports.BUNDLE_MODULES_DUPLICATE }],
    ['webpack.duplicateCode', { link: exports.BUNDLE_MODULES_DUPLICATE }],
    ['webpack.packageCount', { link: exports.BUNDLE_PACKAGES_COUNT }],
    ['webpack.duplicatePackagesCount', { link: exports.BUNDLE_PACKAGES_DUPLICATE }],
]);
//# sourceMappingURL=component-links.js.map