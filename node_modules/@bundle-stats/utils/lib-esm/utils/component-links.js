import { BooleanParam, JsonParam, ObjectParam, StringParam, decodeQueryParams, encodeQueryParams, } from 'serialize-query-params';
import isEmpty from 'lodash/isEmpty';
import { FILE_TYPES, FILE_TYPE_CSS, FILE_TYPE_JS, MODULE_SOURCE_FILE_TYPES, } from '../config/file-types';
import { ASSET_ENTRY_TYPE, ASSET_FILE_TYPE, ASSET_FILTERS, COMPONENT, MODULE_CHUNK, MODULE_FILE_TYPE, MODULE_FILTERS, MODULE_SOURCE_TYPE, PACKAGE_FILTERS, SECTIONS, } from '../config/component-links';
import I18N from '../i18n';
export const getAssetFileTypeFilters = (value = true) => {
    const filters = {};
    FILE_TYPES.forEach((fileTypeFilter) => {
        filters[`${ASSET_FILE_TYPE}.${fileTypeFilter}`] = value;
    });
    return filters;
};
export const getAssetEntryTypeFilters = (value = true) => {
    const filters = {};
    [ASSET_FILTERS.ENTRY, ASSET_FILTERS.INITIAL, ASSET_FILTERS.CHUNK, ASSET_FILTERS.OTHER].forEach((entryTypeFilter) => {
        filters[`${ASSET_ENTRY_TYPE}.${entryTypeFilter}`] = value;
    });
    return filters;
};
export const getModuleSourceTypeFilters = (value = true) => ({
    [`${MODULE_SOURCE_TYPE}.${MODULE_FILTERS.FIRST_PARTY}`]: value,
    [`${MODULE_SOURCE_TYPE}.${MODULE_FILTERS.THIRD_PARTY}`]: value,
});
export const getModuleChunkFilters = (chunkIds, value) => {
    const filters = {};
    chunkIds.forEach((chunkId) => {
        filters[`${MODULE_CHUNK}.${chunkId}`] = value;
    });
    return filters;
};
export const getModuleFileTypeFilters = (value = true) => {
    const filters = {};
    MODULE_SOURCE_FILE_TYPES.forEach((fileType) => {
        filters[`${MODULE_FILE_TYPE}.${fileType}`] = value;
    });
    return filters;
};
export const TOTALS = {
    section: SECTIONS.TOTALS,
    title: I18N.COMPONENT_LINK_TOTALS,
};
export const BUNDLE_ASSETS_INITIAL_JS = {
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_JS,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...getAssetEntryTypeFilters(false),
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.INITIAL}`]: true,
                ...getAssetFileTypeFilters(false),
                [`${ASSET_FILE_TYPE}.${FILE_TYPE_JS}`]: true,
            },
        },
    },
};
export const BUNDLE_ASSETS_INITIAL_CSS = {
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_CSS,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...getAssetEntryTypeFilters(false),
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.INITIAL}`]: true,
                ...getAssetFileTypeFilters(false),
                [`${ASSET_FILE_TYPE}.${FILE_TYPE_CSS}`]: true,
            },
        },
    },
};
export const BUNDLE_ASSETS_CACHE_INVALIDATION = {
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_CACHE_INVALIDATION,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [ASSET_FILTERS.CHANGED]: true,
            },
        },
    },
};
export const BUNDLE_ASSETS_COUNT = {
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_COUNT,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [ASSET_FILTERS.CHANGED]: false,
            },
        },
    },
};
export const BUNDLE_ASSETS_CHUNK_COUNT = {
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_CHUNK_COUNT,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...getAssetEntryTypeFilters(false),
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.CHUNK}`]: true,
            },
        },
    },
};
export const getBundleAsset = (entryId) => ({
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSET_DETAILS,
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            entryId,
            filters: {},
        },
    },
});
export const getBundleAssetsByEntryType = (assetType) => ({
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_BY_ENTRY_TYPE(assetType),
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [ASSET_FILTERS.CHANGED]: false,
                ...getAssetEntryTypeFilters(false),
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.ENTRY}`]: assetType === 'entry',
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.INITIAL}`]: assetType === 'initial',
                [`${ASSET_ENTRY_TYPE}.${ASSET_FILTERS.CHUNK}`]: assetType === 'chunk',
            },
        },
    },
});
export const getBundleAssetsFileTypeComponentLink = (fileType, label = fileType) => ({
    section: SECTIONS.ASSETS,
    title: I18N.COMPONENT_LINK_BUNDLE_ASSETS_BY_FILE_TYPE({ label }),
    params: {
        [COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...getAssetFileTypeFilters(false),
                [`${ASSET_FILE_TYPE}.${fileType}`]: true,
            },
        },
    },
});
export const BUNDLE_MODULES = {
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_MODULES,
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
};
export const BUNDLE_MODULES_DUPLICATE = {
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_MODULES_DUPLICATE,
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [MODULE_FILTERS.CHANGED]: false,
                [MODULE_FILTERS.DUPLICATED]: true,
            },
        },
    },
};
export const getBundleModulesBySearch = (search) => ({
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_MODULES,
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            search,
            filters: {
                [MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
});
export const getBundleModulesByChunk = (chunkIds, chunkId, fileType = '') => ({
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_CHUNK_MODULES,
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [MODULE_FILTERS.CHANGED]: false,
                ...getModuleChunkFilters(chunkIds, false),
                [`${MODULE_CHUNK}.${chunkId}`]: true,
                ...(fileType && {
                    ...getModuleFileTypeFilters(false),
                    [`${MODULE_FILE_TYPE}.${fileType}`]: true,
                }),
            },
        },
    },
});
export const getBundleModulesByFileTpe = (fileType, fileTypeLabel) => ({
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_MODULES_BY_FILE_TYPE(fileTypeLabel || fileType),
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            filters: {
                ...getModuleFileTypeFilters(false),
                [`${MODULE_FILE_TYPE}.${fileType}`]: true,
            },
        },
    },
});
export const getBundleModulesBySource = (thirdParty, label = '') => ({
    section: SECTIONS.MODULES,
    title: I18N.COMPONENT_LINK_MODULES_BY_SOURCE(label),
    params: {
        [COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [`${MODULE_SOURCE_TYPE}.${MODULE_FILTERS.THIRD_PARTY}`]: thirdParty,
                [`${MODULE_SOURCE_TYPE}.${MODULE_FILTERS.FIRST_PARTY}`]: !thirdParty,
            },
        },
    },
});
export const BUNDLE_PACKAGES_COUNT = {
    section: SECTIONS.PACKAGES,
    title: I18N.COMPONENT_LINK_PACKAGES_COUNT,
    params: {
        [COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [PACKAGE_FILTERS.CHANGED]: false,
            },
        },
    },
};
export const BUNDLE_PACKAGES_CHANGED = {
    section: SECTIONS.PACKAGES,
    title: I18N.COMPONENT_LINK_PACKAGES_CHANGED,
    params: {
        [COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [PACKAGE_FILTERS.CHANGED]: true,
            },
        },
    },
};
export const BUNDLE_PACKAGES_DUPLICATE = {
    section: SECTIONS.PACKAGES,
    title: I18N.COMPONENT_LINK_PACKAGES_DUPLICATE,
    params: {
        [COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
};
export const BUNDLE_PACKAGES_DUPLICATE_CHANGED = {
    section: SECTIONS.PACKAGES,
    title: I18N.COMPONENT_LINK_PACKAGES_DUPLICATE_CHANGED,
    params: {
        [COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [PACKAGE_FILTERS.CHANGED]: true,
                [PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
};
export const getBundlePackagesByNameComponentLink = (search) => ({
    section: SECTIONS.PACKAGES,
    title: I18N.COMPONENT_LINK_VIEW_PACKAGE,
    params: {
        [COMPONENT.BUNDLE_PACKAGES]: {
            search,
            filters: {
                [PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
});
const CUSTOM_ENCODING_URI_CHARS_PATTERN = /(_|-)/g;
const CUSTOM_ENCODING_URI_CODE_PATTERN = /(%(?:2D|5F))/g;
function customEncodeURIComponent(value) {
    return encodeURIComponent(value).replace(CUSTOM_ENCODING_URI_CHARS_PATTERN, (char) => `%${char.charCodeAt(0).toString(16).toUpperCase()}`);
}
function customDecodeURIComponent(value) {
    const encodedURI = value.replace(CUSTOM_ENCODING_URI_CODE_PATTERN, (code) => String.fromCharCode(parseInt(code.replace(/^%/, ''), 16)));
    return decodeURIComponent(encodedURI);
}
export const ComponentStateParam = {
    encode: (sectionState) => {
        if (!sectionState) {
            return undefined;
        }
        const search = StringParam.encode(sectionState.search);
        const entryId = StringParam.encode(sectionState.entryId);
        const filtersEncodedValues = {};
        Object.entries(sectionState.filters || {}).forEach(([key, val]) => {
            filtersEncodedValues[customEncodeURIComponent(key)] = BooleanParam.encode(!!val);
        });
        const filters = ObjectParam.encode(filtersEncodedValues);
        const data = {};
        if (search) {
            data.search = search;
        }
        if (entryId) {
            data.entryId = entryId;
        }
        if (!isEmpty(filters)) {
            data.filters = filters;
        }
        return JsonParam.encode(data);
    },
    decode: (queryString) => {
        const params = JsonParam.decode(queryString);
        if (isEmpty(params)) {
            return undefined;
        }
        const search = StringParam.decode(params.search);
        const entryId = StringParam.decode(params.entryId);
        let filters = {};
        if (typeof params.filters === 'string') {
            const decodedFilters = ObjectParam.decode(params.filters);
            Object.entries(decodedFilters || {}).forEach(([key, value]) => {
                const filterDecodedValue = BooleanParam.decode(value);
                if (typeof filterDecodedValue !== 'undefined' && filterDecodedValue !== null) {
                    filters[customDecodeURIComponent(key)] = filterDecodedValue;
                }
            });
        }
        else if (typeof params.filters === 'object') {
            filters = params.filters;
        }
        const result = {};
        if (search) {
            result.search = search;
        }
        if (entryId) {
            result.entryId = entryId;
        }
        if (!isEmpty(filters)) {
            result.filters = filters;
        }
        if (isEmpty(result)) {
            return undefined;
        }
        return result;
    },
};
export const COMPONENT_STATE_META = {
    [COMPONENT.BUNDLE_ASSETS]: ComponentStateParam,
    [COMPONENT.BUNDLE_MODULES]: ComponentStateParam,
    [COMPONENT.BUNDLE_PACKAGES]: ComponentStateParam,
};
export const getComponentStateQueryString = (params = {}) => {
    const data = encodeQueryParams(COMPONENT_STATE_META, params);
    const searchParams = new URLSearchParams(data);
    return searchParams.toString();
};
export const getComponentStateData = (queryString) => {
    const params = new URLSearchParams(queryString);
    return decodeQueryParams(COMPONENT_STATE_META, Object.fromEntries(params.entries()));
};
export const METRIC_COMPONENT_LINKS = new Map([
    ['webpack.totalSizeByTypeALL', { link: TOTALS }],
    ['webpack.totalInitialSizeJS', { link: BUNDLE_ASSETS_INITIAL_JS }],
    ['webpack.totalInitialSizeCSS', { link: BUNDLE_ASSETS_INITIAL_CSS }],
    ['webpack.cacheInvalidation', { link: BUNDLE_ASSETS_CACHE_INVALIDATION }],
    ['webpack.assetCount', { link: BUNDLE_ASSETS_COUNT }],
    ['webpack.chunkCount', { link: BUNDLE_ASSETS_CHUNK_COUNT }],
    ['webpack.moduleCount', { link: BUNDLE_MODULES }],
    ['webpack.duplicateModulesCount', { link: BUNDLE_MODULES_DUPLICATE }],
    ['webpack.duplicateCode', { link: BUNDLE_MODULES_DUPLICATE }],
    ['webpack.packageCount', { link: BUNDLE_PACKAGES_COUNT }],
    ['webpack.duplicatePackagesCount', { link: BUNDLE_PACKAGES_DUPLICATE }],
]);
//# sourceMappingURL=component-links.js.map